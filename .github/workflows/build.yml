---
# yamllint disable rule:line-length rule:truthy

name: build
on:
  push:
  pull_request:
permissions: {}
jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler:
          - gcc-7
          - gcc-10
          - clang-11
      fail-fast: false
    env:
      CC: ${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - id: compilers
        name: Install compilers and tools
        run: |
          sudo apt-get install $CC doxygen gcc-multilib libelf-dev libpcap-dev liburcu-dev linux-libc-dev python3-setuptools
          for C in go gofmt node; do
            sudo update-alternatives --remove-all $C || true
            sudo update-alternatives --install /usr/bin/$C $C $(command -v $C) 1
          done
          go install honnef.co/go/tools/cmd/staticcheck@latest
          sudo pip install meson
          echo meson=$(meson --version) >> $GITHUB_OUTPUT
      - name: Install uBPF
        run: |
          mkdir -p $HOME/ubpf
          cd $HOME/ubpf
          curl -fsLS https://github.com/iovisor/ubpf/archive/$UBPFCOMMIT.tar.gz | tar -xz --strip-components=1
          cd vm
          make
          sudo make install
        env:
          UBPFCOMMIT: 2b9bc44f42f37fccf2991a50ad4cf18c84161652
      - name: Install liburing
        run: |
          mkdir -p $HOME/liburing
          cd $HOME/liburing
          curl -fsLS https://github.com/axboe/liburing/archive/$URINGVER.tar.gz | tar -xz --strip-components=1
          ./configure --prefix=/usr/local
          make -C src
          sudo make install
        env:
          CXX: false
          URINGVER: liburing-2.3
      - name: Cache DPDK and SPDK
        uses: actions/cache@v3
        with:
          path: ~/setup-dpdk
          key: ${{ matrix.compiler }}_${{ steps.compilers.outputs.meson }}_20230410
      - uses: yoursunny/setup-dpdk@main
        with:
          dpdk-version: v23.03
          spdk-version: v23.05
          target-arch: haswell
      - name: Build NDN-DPDK in debug mode
        run: |
          corepack pnpm install
          make
          sudo make install
          for D in sample/activate sample/benchmark sample/status; do
            pushd $D
            corepack pnpm install
            popd
          done
          sudo make uninstall
        env:
          NDNDPDK_MK_THREADSLEEP: 1
      - name: Run required unit tests
        run: |
          echo 'bdev|disk|ethface|fetch|fileserver|fwdp|memifface|memiftransport|tgconsumer|tgproducer' >~/acceptable-failures.txt
          MK_GOTEST_FILTER="/$(cat ~/acceptable-failures.txt)/ d" make test
        env:
          NDNDPDK_MK_THREADSLEEP: 1
      - name: Run optional unit tests
        run: |
          MK_GOTEST_FILTER="/$(cat ~/acceptable-failures.txt)/! d" make test
        env:
          NDNDPDK_MK_THREADSLEEP: 1
        continue-on-error: true
      - name: Check code style
        run: |
          make lint
          git diff --exit-code
      - name: Build docs
        run: make doxygen
      - name: Build docs site
        run: mk/netlify.sh
        if: ${{ matrix.compiler == 'gcc-7' && github.repository == 'yoursunny/ndn-dpdk' && github.event_name == 'push' }}
      - name: Deploy docs site
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: ./build/netlify/
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: ${{ github.sha }} ${{ github.run_id }}
          enable-pull-request-comment: false
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: a0fbfa66-eecb-46d0-9e0b-093ddd1d0fad
        if: ${{ matrix.compiler == 'gcc-7' && github.repository == 'yoursunny/ndn-dpdk' && github.event_name == 'push' }}
  docker:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/build-push-action@v3
        with:
          tags: ndn-dpdk
          context: .  # don't use git context: it won't download .git directory into build context
          build-args: |
            MAKE_ENV=NDNDPDK_MK_RELEASE=1
      - name: Show image size
        run: docker image inspect -f '{{.Size}}' ndn-dpdk
      - name: List files in image
        run: docker run --rm ndn-dpdk find /usr/local
  library:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - name: Install TinyGo
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo_${TINYGO_VERSION}_amd64.deb
          sudo dpkg -i tinygo_${TINYGO_VERSION}_amd64.deb
        working-directory: /tmp
        env:
          TINYGO_VERSION: "0.27.0"
      - name: Build for Linux without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
          go build -v -o /dev/null ./cmd/ndndpdk-ctrl
          go build -v -o /dev/null ./cmd/ndndpdk-godemo
        env:
          CGO_ENABLED: 0
      - name: Build for Windows without cgo
        run: |
          go build -v -o /dev/null ./ndn/...
        env:
          CGO_ENABLED: 0
          GOOS: windows
      - name: Build with TinyGo
        run: |
          tinygo build -o /dev/null -target=wasm ./ndn/ndntestenv/tiny
          make -C sample/wasm
